name: Deploy Infrastructure

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths: ['terraform/environments/**']

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # fetch full history to ensure HEAD~1 exists

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Extract request info
      id: extract-info
      run: |
        set -euo pipefail

        echo "=== repo debug ==="
        git rev-parse --verify HEAD || true
        git rev-parse --verify HEAD~1 2>/dev/null || echo "HEAD~1 missing (will fallback)"
        git --no-pager log --oneline -n 5 || true

        # Try HEAD~1..HEAD first, fallback to origin/main..HEAD
        changed_files=$(git diff --name-only HEAD~1 HEAD | grep -E '\.tfvars$' || true)
        if [ -z "$changed_files" ]; then
          echo "No changed tfvars from HEAD~1..HEAD; trying origin/main..HEAD"
          git fetch origin main --depth=1 || true
          changed_files=$(git diff --name-only origin/main HEAD | grep -E '\.tfvars$' || true)
        fi

        echo "changed_files=$changed_files"

        # default empty outputs
        echo "environment=" >> $GITHUB_OUTPUT
        echo "request_id=" >> $GITHUB_OUTPUT
        echo "tfvars_file=" >> $GITHUB_OUTPUT

        if [ -n "$changed_files" ]; then
          for file in $changed_files; do
            # expecting terraform/environments/aws/<env>/requests/<id>.tfvars
            if [[ $file =~ ^terraform/environments/aws/([^/]+)/requests/([^/]+)\.tfvars$ ]]; then
              environment="${BASH_REMATCH[1]}"
              request_id="${BASH_REMATCH[2]}"
              echo "Found request: env=$environment id=$request_id file=$file"
              echo "environment=$environment" >> $GITHUB_OUTPUT
              echo "request_id=$request_id" >> $GITHUB_OUTPUT
              echo "tfvars_file=$file" >> $GITHUB_OUTPUT
              break
            fi
          done
        else
          echo "No matching tfvars changed; nothing to deploy."
        fi

    - name: Deploy Infrastructure
      if: steps.extract-info.outputs.request_id != ''
      run: |
        set -euo pipefail

        environment=${{ steps.extract-info.outputs.environment }}
        request_id=${{ steps.extract-info.outputs.request_id }}
        tfvars_file=${{ steps.extract-info.outputs.tfvars_file }}

        echo "Deploying request_id=$request_id in environment=$environment (tfvars: $tfvars_file)"

        cd terraform/environments/aws/"$environment"

        terraform init -input=false
        terraform plan -var-file="requests/${request_id}.tfvars" -out=tfplan
        terraform apply -auto-approve tfplan

        echo "Terraform apply finished for request $request_id"


