name: Deploy Infrastructure
on:
  pull_request:
    types: [closed]
    branches: [main]
    paths: ['backend/terraform/environments/**']

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # fetch full history to ensure HEAD~1 exists

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Extract request info
      id: extract-info
      run: |
        set -euo pipefail
        
        echo "=== Repository Debug ==="
        echo "Current HEAD: $(git rev-parse HEAD)"
        echo "Repository: ${{ github.repository }}"
        echo "PR Number: ${{ github.event.pull_request.number }}"
        echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
        echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
        
        # Verify commits exist
        git rev-parse --verify HEAD || echo "ERROR: HEAD not found"
        git rev-parse --verify HEAD~1 2>/dev/null || echo "WARNING: HEAD~1 missing"
        
        echo "=== Recent Commits ==="
        git --no-pager log --oneline -n 5 || true
        
        echo "=== Finding Changed Files ==="
        # Try multiple strategies to find changed files
        changed_files=""
        
        # Strategy 1: HEAD~1..HEAD
        if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
          echo "Trying HEAD~1..HEAD"
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep -E '\.tfvars$' || true)
          echo "Files from HEAD~1..HEAD: $changed_files"
        fi
        
        # Strategy 2: origin/main..HEAD if first strategy failed
        if [ -z "$changed_files" ]; then
          echo "Trying origin/main..HEAD"
          git fetch origin main --depth=50 || true
          changed_files=$(git diff --name-only origin/main HEAD | grep -E '\.tfvars$' || true)
          echo "Files from origin/main..HEAD: $changed_files"
        fi
        
        # Strategy 3: Use GitHub API data if available
        if [ -z "$changed_files" ]; then
          echo "Trying to list all .tfvars files in backend/terraform/environments/"
          find backend/terraform/environments/ -name "*.tfvars" -type f 2>/dev/null || echo "No backend/terraform/environments directory found"
        fi
        
        echo "=== All found .tfvars files ==="
        echo "Changed .tfvars files: $changed_files"
        
        # Initialize outputs with empty values
        echo "environment=" >> $GITHUB_OUTPUT
        echo "request_id=" >> $GITHUB_OUTPUT
        echo "tfvars_file=" >> $GITHUB_OUTPUT
        
        if [ -n "$changed_files" ]; then
          for file in $changed_files; do
            echo "Processing file: $file"
            
            # Expected pattern: backend/terraform/environments/aws/<env>/requests/<id>.tfvars
            if [[ $file =~ ^backend/terraform/environments/aws/([^/]+)/requests/([^/]+)\.tfvars$ ]]; then
              environment="${BASH_REMATCH[1]}"
              request_id="${BASH_REMATCH[2]}"
              echo "‚úÖ MATCH FOUND: env=$environment id=$request_id file=$file"
              echo "environment=$environment" >> $GITHUB_OUTPUT
              echo "request_id=$request_id" >> $GITHUB_OUTPUT
              echo "tfvars_file=$file" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå Pattern mismatch for file: $file"
              echo "Expected pattern: backend/terraform/environments/aws/<env>/requests/<id>.tfvars"
            fi
          done
        else
          echo "‚ö†Ô∏è  No .tfvars files found in changes"
        fi
        
        echo "=== Final Outputs ==="
        echo "Environment: $(cat $GITHUB_OUTPUT | grep '^environment=' | cut -d'=' -f2-)"
        echo "Request ID: $(cat $GITHUB_OUTPUT | grep '^request_id=' | cut -d'=' -f2-)"
        echo "TFVars File: $(cat $GITHUB_OUTPUT | grep '^tfvars_file=' | cut -d'=' -f2-)"

    - name: Validate Terraform Configuration
      if: steps.extract-info.outputs.request_id != ''
      run: |
        set -euo pipefail
        environment=${{ steps.extract-info.outputs.environment }}
        request_id=${{ steps.extract-info.outputs.request_id }}
        tfvars_file=${{ steps.extract-info.outputs.tfvars_file }}
        
        echo "=== Validation Phase ==="
        echo "Environment: $environment"
        echo "Request ID: $request_id"  
        echo "TFVars File: $tfvars_file"
        
        # Verify files exist
        if [ ! -f "$tfvars_file" ]; then
          echo "ERROR: TFVars file not found: $tfvars_file"
          exit 1
        fi
        
        terraform_dir="backend/terraform/environments/aws/$environment"
        if [ ! -d "$terraform_dir" ]; then
          echo "ERROR: Terraform directory not found: $terraform_dir"
          exit 1
        fi
        
        echo "‚úÖ All required files and directories exist"

    - name: Deploy Infrastructure
      if: steps.extract-info.outputs.request_id != ''
      run: |
        set -euo pipefail
        environment=${{ steps.extract-info.outputs.environment }}
        request_id=${{ steps.extract-info.outputs.request_id }}
        tfvars_file=${{ steps.extract-info.outputs.tfvars_file }}
        
        echo "=== Deployment Phase ==="
        echo "Deploying request_id=$request_id in environment=$environment"
        echo "Using tfvars file: $tfvars_file"
        
        cd backend/terraform/environments/aws/"$environment"
        
        # Initialize Terraform
        echo "Initializing Terraform..."
        terraform init -input=false
        
        # Plan deployment
        echo "Planning deployment..."
        terraform plan -var-file="requests/${request_id}.tfvars" -out=tfplan -detailed-exitcode
        
        # Apply deployment
        echo "Applying deployment..."
        terraform apply -auto-approve tfplan
        
        echo "‚úÖ Terraform deployment completed successfully for request $request_id"

    - name: Store State
      if: success() && steps.extract-info.outputs.request_id != ''
      run: |
        environment=${{ steps.extract-info.outputs.environment }}
        request_id=${{ steps.extract-info.outputs.request_id }}
        
        echo "=== Storing Deployment State ==="
        echo "Request $request_id deployed successfully to $environment"
        
        # You can add logic here to:
        # - Update a database
        # - Send notifications
        # - Create deployment records
        # - Update status in external systems

    - name: Notify Success
      if: success() && steps.extract-info.outputs.request_id != ''
      run: |
        request_id=${{ steps.extract-info.outputs.request_id }}
        environment=${{ steps.extract-info.outputs.environment }}
        
        echo "üéâ Deployment successful!"
        echo "Request ID: $request_id"
        echo "Environment: $environment"
        echo "Deployed at: $(date -u)"

    - name: Notify Failure
      if: failure() && steps.extract-info.outputs.request_id != ''
      run: |
        request_id=${{ steps.extract-info.outputs.request_id }}
        environment=${{ steps.extract-info.outputs.environment }}
        
        echo "‚ùå Deployment failed!"
        echo "Request ID: $request_id"
        echo "Environment: $environment"
        echo "Failed at: $(date -u)"
        
        # Add failure notification logic here
        exit 1

    - name: Debug Info on No Match
      if: steps.extract-info.outputs.request_id == ''
      run: |
        echo "=== Debug: No matching tfvars files found ==="
        echo "This workflow expects files in the pattern:"
        echo "backend/terraform/environments/aws/<env>/requests/<id>.tfvars"
        echo ""
        echo "Current repository structure:"
        find . -name "*.tfvars" -type f | head -10 || echo "No .tfvars files found"
        echo ""
        echo "Recent changes:"
        git diff --name-only HEAD~1 HEAD || git diff --name-only origin/main HEAD || echo "No changes detected"
