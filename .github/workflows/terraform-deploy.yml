name: Deploy Infrastructure

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'terraform/environments/**'
      - 'backend/terraform/environments/**'

jobs:
  deploy:
    # only run when the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:

    - name: Checkout (full history)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Detect changed tfvars
      id: detect
      run: |
        set -euo pipefail
        echo "Detecting changed .tfvars files... (trying HEAD~1..HEAD, falling back to origin/main..HEAD)"

        # Try diff between HEAD~1 and HEAD
        changed=$(git diff --name-only HEAD~1 HEAD || true)

        if [ -z "$changed" ]; then
          echo "No local HEAD~1; fetching origin/main to compare..."
          git fetch origin main --depth=1 || git fetch origin main
          changed=$(git diff --name-only origin/main HEAD || true)
        fi

        # include both possible repo layouts:
        # terraform/environments/aws/<env>/requests/<id>.tfvars
        # backend/terraform/environments/aws/<env>/requests/<id>.tfvars
        tfvars_files=$(printf "%s\n" "$changed" | grep -E '(^|/)environments/aws/[^/]+/requests/[^/]+\.tfvars$' || true)

        echo "ALL_CHANGED_FILES<<EOF" >> $GITHUB_OUTPUT
        printf "%s\n" "$changed" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        if [ -z "$tfvars_files" ]; then
          echo "no_tfvars=true" >> $GITHUB_OUTPUT
          echo "tfvars_match=" >> $GITHUB_OUTPUT
          echo "environment=" >> $GITHUB_OUTPUT
          echo "request_id=" >> $GITHUB_OUTPUT
          echo "::warning::No tfvars change detected in environments/aws/**/requests/*.tfvars — skipping deploy."
          exit 0
        fi

        # pick the first matching tfvars (if multiple, you can extend logic)
        # normalize path to remove leading './' if present
        tfvars_file=$(printf "%s\n" "$tfvars_files" | head -n1 | sed 's#^\./##')
        # extract environment and request id
        if [[ "$tfvars_file" =~ environments/aws/([^/]+)/requests/([^/]+)\.tfvars$ ]]; then
          environment=${BASH_REMATCH[1]}
          request_id=${BASH_REMATCH[2]}
        else
          # try backend/terraform prefix variant
          if [[ "$tfvars_file" =~ backend/terraform/environments/aws/([^/]+)/requests/([^/]+)\.tfvars$ ]]; then
            environment=${BASH_REMATCH[1]}
            request_id=${BASH_REMATCH[2]}
          else
            echo "::error::Could not parse environment/request id from: $tfvars_file"
            echo "no_tfvars=true" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi

        echo "no_tfvars=false" >> $GITHUB_OUTPUT
        echo "tfvars_match=$tfvars_file" >> $GITHUB_OUTPUT
        echo "environment=$environment" >> $GITHUB_OUTPUT
        echo "request_id=$request_id" >> $GITHUB_OUTPUT

    - name: Deploy (terraform plan & apply)
      if: steps.detect.outputs.no_tfvars == 'false' && steps.detect.outputs.request_id != ''
      env:
        TF_VAR_file: ${{ steps.detect.outputs.tfvars_match }}
      run: |
        set -euo pipefail

        environment="${{ steps.detect.outputs.environment }}"
        request_id="${{ steps.detect.outputs.request_id }}"
        tfvars="${{ steps.detect.outputs.tfvars_match }}"

        echo "=== Deployment Phase ==="
        echo "Request: $request_id"
        echo "Environment: $environment"
        echo "Using tfvars: $tfvars"

        # determine base dir (support both 'terraform/...' and 'backend/terraform/...')
        # prefer path that contains the tfvars file
        if [[ "$tfvars" == backend/terraform/* ]]; then
          base="backend/terraform/environments/aws/$environment"
        else
          base="terraform/environments/aws/$environment"
        fi

        if [ ! -d "$base" ]; then
          echo "::error::Terraform environment directory not found: $base"
          ls -la "$(dirname "$tfvars")" || true
          exit 1
        fi

        cd "$base"

        # Ensure tfvars file exists relative to this dir (it should)
        if [ ! -f "requests/${request_id}.tfvars" ]; then
          echo "::error::tfvars file not found at requests/${request_id}.tfvars relative to $base"
          echo "Absolute path candidate: $(pwd)/requests/${request_id}.tfvars"
          exit 1
        fi

        echo "Initializing Terraform..."
        terraform init -input=false

        echo "Planning..."
        # -detailed-exitcode: 0 = no changes, 2 = changes, 1 = error
        terraform plan -var-file="requests/${request_id}.tfvars" -out=tfplan -detailed-exitcode || rc=$?; true
        rc=${rc:-0}
        if [ "$rc" -eq 1 ]; then
          echo "::error::terraform plan failed (exit code 1)"
          terraform plan -var-file="requests/${request_id}.tfvars" || true
          exit 1
        fi

        if [ "$rc" -eq 0 ]; then
          echo "No changes to apply (terraform plan exit code 0). Exiting."
          exit 0
        fi

        # rc == 2 => there are changes to apply
        echo "Applying changes..."
        terraform apply -auto-approve tfplan

        echo "✅ Terraform apply finished for $request_id"

    # keep cleanup / post-checkout steps minimal
    - name: Finish
      run: echo "Done"


